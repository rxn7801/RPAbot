{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotBrowserTemplate","actions":["start","openBrowser","navigateToWeb","closeBrowser","end"],"conditionalActions":[],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n     * Action \"start\"\n     *\n     * @throws Exception\n     */\npublic void start() throws Exception {\n    server = JidokaFactory.getServer();\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    client = getInstance(this);\n    initDataProvider();\n}"},{"id":"openBrowser","implementation":"/**\n     * Open Web Browser\n     *\n     * @throws Exception\n     */\npublic void openBrowser() throws Exception {\n    browser = IWebBrowserSupport.getInstance(this, client);\n    browserType = server.getParameters().get(\"Browser\");\n    // Select browser type\n    if (StringUtils.isBlank(browserType)) {\n        server.info(\"Browser parameter not present. Using the default browser CHROME\");\n        browser.setBrowserType(EBrowsers.CHROME);\n        browserType = EBrowsers.CHROME.name();\n    } else {\n        EBrowsers selectedBrowser = EBrowsers.valueOf(browserType);\n        browser.setBrowserType(selectedBrowser);\n        server.info(\"Browser selected: \" + selectedBrowser.name());\n    }\n    // Set timeout to 60 seconds\n    browser.setTimeoutSeconds(60);\n    // Set remote debugger port before initializing browser\n    ChromeOptions options = new  ChromeOptions();\n    options.setExperimentalOption(\"debuggerAddress\", \"localhost:5383\");\n    browser.setCapabilities(options);\n    // Init the browser module\n    browser.initBrowser();\n    server.setNumberOfItems(1);\n}"},{"id":"navigateToWeb","implementation":"/**\n     * Navigate to Web Page\n     *\n     * @throws Exception\n     */\npublic void navigateToWeb() throws Exception {\n    server.setCurrentItem(1, HOME_URL);\n    By searchBar = By.xpath(\"/html/body/div/div[4]/form/div[2]/div[1]/div[1]/div/div[2]/input\");\n    browser.textFieldSet(searchBar, \"monzo sort code\", true);\n    By search = By.xpath(\"/html/body/div/div[4]/form/div[2]/div[1]/div[2]/div[2]/div[2]/center/input[1]\");\n    browser.clickOnElement(search);\n    By sortCodePath = By.xpath(\"/html/body/div[7]/div[2]/div[9]/div[1]/div[2]/div/div[2]/div[2]/div/div/div[1]/div[1]/div/div[1]/div/div[2]/div/div[1]\");\n    String sortCode = browser.getText(sortCodePath, true);\n    server.info(\" Sort code from google :: \" + sortCode);\n    By searchText = By.xpath(\"/html/body/div[4]/form/div[2]/div[1]/div[2]/div/div[2]/input\");\n    boolean isMatchFound = processItem(sortCode);\n    server.info(\" Is Match found :: \" + isMatchFound);\n    if (isMatchFound)\n        browser.textFieldSet(searchText, \"Match Found!\", true);\n    else\n        browser.textFieldSet(searchText, \"Match Not Found!\", true);\n    //This command is uses to make visible in the desktop the page (IExplore issue)\n    if (browserType.equals(\"IE\")) {\n        client.clickOnCenter();\n        client.pause(3000);\n    }\n    // we save the screenshot, it can be viewed in robot execution trace page on the console\n    server.sendScreen(\"Screen after load page: \" + HOME_URL);\n}"},{"id":"closeBrowser","implementation":"/**\n     * Close Browser\n     *\n     * @throws Exception\n     */\npublic void closeBrowser() throws Exception {\n    // close();\n    closeDataProvider();\n    server.setCurrentItemResultToOK(\"Success\");\n}"},{"id":"end","implementation":"/**\n     * Action \"end\"\n     *\n     * @throws Exception\n     */\npublic void end() throws Exception {\n}"}],"conditionalActionDetails":[],"sdkMethods":[]}